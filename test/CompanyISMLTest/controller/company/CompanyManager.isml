package test

controller CompanyManager {
	has Persistence<Company> persistence
	
	/**
	* Lists all instances of Company.
	*/
	default listAll() {
		show CompanyList(persistence.findAll())
	}

	/**
	* Lists instances of Company.
	* @param companyList The list of instances of Company to show.
	*/
	listCompany(Collection<Company> companyList) {
	show CompanyList(companyList)
	}
	
	/**
	* Lists instances of Company that are in a collection.
	* @param companyList The list of instances of Company to show.
	*/
	subListCompany(Any container, Collection<Company> collection) {
		show CompanySubList(container, collection)
	}

	/** Creates a new instance of Company and opens a form to 
	* edit that instance and add it to collection.
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	*/
	createCompanyToAdd(Any container, Collection<Company> collection) {
		show CreateCompanyToAdd(container, collection, new Company)
	}

	/** Opens a page to select an instance to add it to collection.
	* @param container The entity that contains collection
	* @param collection The collection to which the selected instance will be added
	*/
	selectCompanyToAdd(Any container, Collection<Company> collection) {
	Collection<Company> selectableElements = persistence.findAllExcept(collection)
	show SelectCompanyToAdd(selectableElements, container, collection)
	}

	/** Adds an instance of Company to a collection
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	* @param company The instance that will be added to collection
	*/
	addCompany(Any container, Collection<Company> collection, Company instance) {
	persistence.addToCollection(container, collection, instance)
	-> DefaultPageDispatcher.edit(container)
	}
	
	
	
	/** Removes an instance of Company from a collection
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	* @param company The instance that will be removed from collection
	*/
	removeCompany(Any container, Collection<Company> collection, Company instance) {
		persistence.removeFromCollection(container, collection, instance)
		-> DefaultPageDispatcher.edit(container)
	}
	
	/** Opens a page to select an instance to assign it to an entity's attribute.
	* @param container The entity that has the attribute
	* @param attribute The attribute name to which the selected instance will be assigned
	*/
	selectCompanyToAssign(Any container, String attribute) {
		Collection<Company> elements = persistence.findAll()
		show SelectCompanyToAssign(elements, container, attribute)
	}
	
	/** Assigns an object to an entity's attribute.
	* @param container The entity that has the attribute
	* @param attribute The attribute name that will be assigned
	* @param instance The object that will be assigned to attribute
	*/
	assignCompany(Any container, String attribute, Company instance) {
		persistence.assignToAttribute(container, attribute, instance)
		-> DefaultPageDispatcher.edit(container)
	}
	
	/**
	* Views an instance of Company.
	* @param id the ID of the Company.
	*/
	viewCompany(Integer id) {
		show ViewCompany(persistence.find(id))
	}

	/**
	* Views an instance of Company.
	* @param company the Company to open.
	*/		
	viewCompany(Company company) {
	show ViewCompany(company)
	}


	/**
	* Edits an existing instance of Company.
	* @param company the Company to open.
	*/			
	editCompany(Company company) {
	show EditCompany(company)
	}

	/**
	* Creates a a new instance of Company.
	*/			
	createCompany() {
		show EditCompany(new Company)
	}


	/**
	* Saves an instance of Company.
	* @param company the Company to save.
	*/			
	saveCompany(Company company) {
	if(persistence.isPersistent(company)){
		persistence.edit(company)
	} else {
		persistence.create(company)
	}
	-> listAll()
	}


	/**
	* Deletes an instance of Company.
	* @param company the Company to delete.
	*/		
	deleteCompany(Company company) {
	persistence.remove(company)
	-> listAll()
	}

	/**
	* Deletes an instance of Company.
	* @param id the ID of the Company to delete.
	*/		
	deleteCompany(Integer id) {
	persistence.remove(id)
	-> listAll()
	}
}
