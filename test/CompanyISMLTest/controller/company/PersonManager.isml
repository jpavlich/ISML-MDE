package test

controller PersonManager {
	has Persistence<Person> persistence
	
	/**
	* Lists all instances of Person.
	*/
	default listAll() {
		show PersonList(persistence.findAll())
	}

	/**
	* Lists instances of Person.
	* @param personList The list of instances of Person to show.
	*/
	listPerson(Collection<Person> personList) {
	show PersonList(personList)
	}
	
	/**
	* Lists instances of Person that are in a collection.
	* @param personList The list of instances of Person to show.
	*/
	subListPerson(Any container, Collection<Person> collection) {
		show PersonSubList(container, collection)
	}

	/** Creates a new instance of Person and opens a form to 
	* edit that instance and add it to collection.
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	*/
	createPersonToAdd(Any container, Collection<Person> collection) {
		show CreatePersonToAdd(container, collection, new Person)
	}

	/** Opens a page to select an instance to add it to collection.
	* @param container The entity that contains collection
	* @param collection The collection to which the selected instance will be added
	*/
	selectPersonToAdd(Any container, Collection<Person> collection) {
	Collection<Person> selectableElements = persistence.findAllExcept(collection)
	show SelectPersonToAdd(selectableElements, container, collection)
	}

	/** Adds an instance of Person to a collection
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	* @param person The instance that will be added to collection
	*/
	addPerson(Any container, Collection<Person> collection, Person instance) {
	persistence.addToCollection(container, collection, instance)
	-> DefaultPageDispatcher.edit(container)
	}
	
	
	
	/** Removes an instance of Person from a collection
	* @param container The entity that contains collection
	* @param collection The collection to which the new instance will be added
	* @param person The instance that will be removed from collection
	*/
	removePerson(Any container, Collection<Person> collection, Person instance) {
		persistence.removeFromCollection(container, collection, instance)
		-> DefaultPageDispatcher.edit(container)
	}
	
	/** Opens a page to select an instance to assign it to an entity's attribute.
	* @param container The entity that has the attribute
	* @param attribute The attribute name to which the selected instance will be assigned
	*/
	selectPersonToAssign(Any container, String attribute) {
		Collection<Person> elements = persistence.findAll()
		show SelectPersonToAssign(elements, container, attribute)
	}
	
	/** Assigns an object to an entity's attribute.
	* @param container The entity that has the attribute
	* @param attribute The attribute name that will be assigned
	* @param instance The object that will be assigned to attribute
	*/
	assignPerson(Any container, String attribute, Person instance) {
		persistence.assignToAttribute(container, attribute, instance)
		-> DefaultPageDispatcher.edit(container)
	}
	
	/**
	* Views an instance of Person.
	* @param id the ID of the Person.
	*/
	viewPerson(Integer id) {
		show ViewPerson(persistence.find(id))
	}

	/**
	* Views an instance of Person.
	* @param person the Person to open.
	*/		
	viewPerson(Person person) {
	show ViewPerson(person)
	}


	/**
	* Edits an existing instance of Person.
	* @param person the Person to open.
	*/			
	editPerson(Person person) {
	show EditPerson(person)
	}

	/**
	* Creates a a new instance of Person.
	*/			
	createPerson() {
		show EditPerson(new Person)
	}


	/**
	* Saves an instance of Person.
	* @param person the Person to save.
	*/			
	savePerson(Person person) {
	if(persistence.isPersistent(person)){
		persistence.edit(person)
	} else {
		persistence.create(person)
	}
	-> listAll()
	}


	/**
	* Deletes an instance of Person.
	* @param person the Person to delete.
	*/		
	deletePerson(Person person) {
	persistence.remove(person)
	-> listAll()
	}

	/**
	* Deletes an instance of Person.
	* @param id the ID of the Person to delete.
	*/		
	deletePerson(Integer id) {
	persistence.remove(id)
	-> listAll()
	}
}
